{"name":"Mongo cache store","tagline":"ActiveSupport cache using MongoDB","body":"# MongoCacheStore\r\n\r\nA MongoDB cache store for ActiveSupport 3\r\n\r\n## Description\r\n\r\nMongoCacheStore uses pluggable backends to expose MongoDB \r\nas a cache store to ActiveSupport applications.  Each backend \r\nallows the application to customize how the cache operates.  \r\nSupport is available for standard, capped and TTL collections.\r\n\r\n\r\n## Initialize the cache\r\n\r\n### Usage\r\n\r\n\r\n    config.cache_store = :mongo_cache_store, :TTL, :db => Mongo::DB.new('db_name',Mongo::Connection.new)\r\n    config.cache_store = :mongo_cache_store, :Standard, :db_name => 'db_name', :connection => Mongo::Connection.new, :serialize => :on_fail\r\n\r\n\r\n### Attributes  \r\n \r\n#### backend\r\n\r\nSymbol representing the backend the cache should use \r\n\r\n  * *:TTL* - ActiveSupport::Cache::MongoCacheStore::Backend::TTL\r\n  * *:Standard* - ActiveSupport::Cache::MongoCacheStore::Backend::Standard\r\n  * *:MultiTTL* - ActiveSupport::Cache::MongoCacheStore::Backend::MultiTTL\r\n  * *:Capped* - ActiveSupport::Cache::MongoCacheStore::Backend::Capped\r\n\r\n#### options\r\n\r\nOptions for ActiveSupport::Cache and the backend] \r\n    \r\nCore options are listed here.  See each backend for a list of additional optons. \r\n\r\n  * *:db* - A Mongo::DB instance.\r\n  * *:db_name* - Name of database to create if no 'db' is given.\r\n  * *:connection* - A Mongo::Connection instance. Only used if no 'db' is given.\r\n  * *:collection_opts*\r\n    > Hash of options passed directly to MongoDB::Collection.\r\n       \r\n    > Useful for write conditions and read preferences\r\n\r\n  * *:serialize* - *:always* | :on_fail | :never\r\n    * *:always* - (default) - Serialize all entries\r\n      > *NOTE* Without serialization class structures and instances that cannot \r\n        be converted to a native MongoDB type will not be stored.  Also, \r\n        without serialization MongoDB converts all symbols to strings.  \r\n            \r\n      > Therefore a hash with symbols as keys will have strings as keys when read.\r\n \r\n    * *:on_fail* - Serialize if native format fails\r\n      > Try to save the entry in a native MongoDB format.  If that fails, \r\n        then serialize the entry. \r\n    * *:never* - Never serialize\r\n      > Only save the entry if it can be saved natively by MongoDB.\r\n\r\n\r\n## Increment / Decrement\r\n\r\nIncrement and decrement values must be an Integer.  In the ActiveSupport test\r\nsuite strings and integers are used interchangeably.  This cache store however\r\nuses MongoDB's $inc operator which must, be an integer.  \r\n\r\n\r\n## Keys can be a Hash\r\n\r\nThe following test from ActiveSupport fails with MongoCacheStore:\r\n\r\n    def test_hash_as_cache_key\r\n      @cache.write({:foo => 1, :fu => 2}, \"bar\")\r\n      assert_equal \"bar\", @cache.read(\"foo=1/fu=2\")\r\n    end\r\n\r\nThis is because a key can be a true Hash.  It will not be converted to a string.\r\n\r\n\r\n## Backends\r\n\r\n### TTL\r\n\r\n\r\nTTL backend for MongoCacheStore\r\n\r\n#### Description\r\n  \r\nEntries are kept in a namespaced TTL collection that will \r\nautomatically flush any entries as they pass their expiration \r\ntime. This keeps the size of the cache in check over time. \r\n\r\n<b>Requires MongoDB 2.2 or higher</b>\r\n\r\n#### Additional Options\r\n\r\nNo additional options at this time\r\n\r\n***\r\n### Standard\r\n\r\nStandard backend for MongoCacheStore\r\n \r\n#### Description\r\n\r\nEntries are kept in a namespaced MongoDB collection. In a standard \r\ncollection entries are only flushed from the collection with an \r\nexplicit delete call or if auto_flush is enabled.  If auto_flush is \r\nenabled the cache will flush all expired entries when auto\\_flush\\_threshold \r\nis reached.  The threshold is based on a set number of cache instance writes. \r\n\r\n#### Additional Options  \r\n \r\nThe following options can be added to a MongoCacheStore constructor\r\n \r\nTo see a list of core options see MongoCacheStore\r\n\r\n  * *:auto_flush* - *true* | false\r\n    > Default: true\r\n        \r\n    > If auto_flush is enabled the cache will flush all \r\n      expired entries when auto\\_flush\\_threshold\r\n      is reached.\r\n\r\n  * *:auto_flush_threshold* - *10_000* \r\n    > Default: 10_000\r\n\r\n    > A number representing the number of writes the when the cache \r\n      should preform before flushing expired entries.\r\n\r\n***\r\n### MultiTTL \r\n\r\n\r\nMultiTTL backend for MongoCacheStore\r\n \r\n#### Description\r\n\r\nEntries are stored in multiple namespaced TTL collections. \r\nA namespaced TTL collection is created for each unique expiration time.  \r\nFor example all entries with an expiration time of 300 seconds will be \r\nkept in the same collection while entries with a 900 second expiration \r\ntime will be kept in another.  This requires the use of a *key index* \r\ncollection that keeps track of which TTL collection a entry resides in. \r\n\r\n##### Downsides\r\n* Cache set operations require 2 MongoDB write calls.  \r\n  One for the key index, one for the TTL collection. \r\n  (unless *use_index* is false, see below)\r\n* Cache read operations will require 1 or 2 MongoDB calls \r\n  depending on whether the 'expires_in' option is set for the read.\r\n\r\n##### Benefits (future)\r\n* Ability to flush cache based on expire time (TODO)\r\n\r\n\r\n#### Additional Options  \r\n  \r\nThe following options can be added to a MongoCacheStore constructor\r\n\r\nTo see a list of core options see MongoCacheStore\r\n\r\n  * *:use_index* - *true* | false\r\n  > Default: true\r\n\r\n  > This should only be set to *false* if all fetch and/or read \r\n    operations are passed the *:expires_in* option.  If so, this \r\n    will eliminate the need for the key index collection and only \r\n    one write and one read operation is necessary. \r\n\r\n***\r\n### Capped\r\n\r\n \r\n*Experimental*\r\n\r\nCapped backend for MongoCacheStore\r\n\r\n### Description\r\n*Experimental* do not use... yet.\r\n \r\nThis should only be used if limiting the size of the cache \r\nis of great concern.  Entries are flushed from the cache on \r\na FIFO basis, regardless of the entries expiration time.  \r\nDelete operations set an entry to expired, but it will not \r\nbe flushed until it is automatically removed by MongoDB.\r\n  \r\n#### Options\r\n\r\nTODO\r\n \r\n## Build Status\r\n[![Build Status - Master](https://travis-ci.org/kmcgrath/mongo_cache_store.png?branch=master)](https://travis-ci.org/kmcgrath/mongo_cache_store)\r\n[![Build Status - Develop](https://travis-ci.org/kmcgrath/mongo_cache_store.png?branch=develop)](https://travis-ci.org/kmcgrath/mongo_cache_store)\r\n\r\nTravis is used to build and test MongoCacheStore against:\r\n* 2.0.0\r\n* 1.9.3\r\n* 1.9.2\r\n* 1.8.7\r\n* jruby-18mode\r\n* jruby-19mode\r\n* rbx-19mode \r\n* ruby-head\r\n* jruby-head\r\n* ree\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}